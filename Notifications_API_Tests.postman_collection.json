{
	"info": {
		"_postman_id": "notifications-api-tests",
		"name": "🔔 CARK Notifications API Tests",
		"description": "مجموعة شاملة لاختبار APIs الإشعارات في نظام CARK\n\n## 📋 الميزات المشمولة:\n- إنشاء وإدارة الإشعارات\n- عرض الإشعارات المقروءة وغير المقروءة\n- إحصائيات مفصلة\n- تمييز الإشعارات كمقروءة\n- حذف الإشعارات\n\n## 🔑 المتطلبات:\n1. تأكد من تشغيل السيرفر على المنفذ المحدد\n2. احصل على JWT token من تسجيل الدخول\n3. ضع الـ token في المتغير `auth_token`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "🔐 Authentication",
			"item": [
				{
					"name": "Login & Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.collectionVariables.set('auth_token', jsonData.access);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "📊 Notifications Overview",
			"item": [
				{
					"name": "Get All Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response structure is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return Array.isArray(data) || (data.hasOwnProperty('results') && Array.isArray(data.results));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Notifications (with Count)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has unread_count', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('unread_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/unread/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"unread",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Notifications Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has count fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('unread_count');",
									"    pm.expect(jsonData).to.have.property('total_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/count/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"count",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Notifications Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has statistics structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('unread');",
									"    pm.expect(jsonData).to.have.property('read');",
									"    pm.expect(jsonData).to.have.property('by_type');",
									"    pm.expect(jsonData).to.have.property('by_priority');",
									"});",
									"",
									"pm.test(\"Statistics by type are valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const byType = jsonData.by_type;",
									"    pm.expect(byType).to.have.property('rental');",
									"    pm.expect(byType).to.have.property('payment');",
									"    pm.expect(byType).to.have.property('system');",
									"    pm.expect(byType).to.have.property('promotion');",
									"    pm.expect(byType).to.have.property('other');",
									"});",
									"",
									"pm.test(\"Statistics by priority are valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const byPriority = jsonData.by_priority;",
									"    pm.expect(byPriority).to.have.property('urgent');",
									"    pm.expect(byPriority).to.have.property('high');",
									"    pm.expect(byPriority).to.have.property('normal');",
									"    pm.expect(byPriority).to.have.property('low');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/stats/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"stats",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "✏️ Create Notifications",
			"item": [
				{
					"name": "Create Rental Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Notification created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.notification_type).to.eql('RENTAL');",
									"    pm.expect(jsonData.priority).to.eql('HIGH');",
									"    pm.expect(jsonData.is_read).to.be.false;",
									"    ",
									"    // Store notification ID for later tests",
									"    pm.collectionVariables.set('test_notification_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver\": {{receiver_user_id}},\n    \"title\": \"تم تأكيد حجزك\",\n    \"message\": \"تم تأكيد حجزك للسيارة BMW X5 بنجاح. موعد الاستلام: غداً الساعة 10:00 صباحاً\",\n    \"notification_type\": \"RENTAL\",\n    \"priority\": \"HIGH\",\n    \"data\": {\n        \"car_name\": \"BMW X5\",\n        \"pickup_time\": \"2025-01-16 10:00:00\",\n        \"rental_id\": 123,\n        \"location\": \"فرع المعادي\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Payment notification created\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.notification_type).to.eql('PAYMENT');",
									"    pm.expect(jsonData.priority).to.eql('URGENT');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver\": {{receiver_user_id}},\n    \"title\": \"تم الدفع بنجاح\",\n    \"message\": \"تم دفع مبلغ 500 جنيه لحجز السيارة بنجاح. رقم العملية: PAY123456\",\n    \"notification_type\": \"PAYMENT\",\n    \"priority\": \"URGENT\",\n    \"data\": {\n        \"amount\": 500,\n        \"currency\": \"EGP\",\n        \"transaction_id\": \"PAY123456\",\n        \"payment_method\": \"Credit Card\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create System Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver\": {{receiver_user_id}},\n    \"title\": \"تحديث النظام\",\n    \"message\": \"تم تحديث النظام بنجاح. تم إضافة ميزات جديدة ولحل بعض المشاكل.\",\n    \"notification_type\": \"SYSTEM\",\n    \"priority\": \"NORMAL\",\n    \"data\": {\n        \"version\": \"2.1.0\",\n        \"features\": [\"تحسين الواجهة\", \"إصلاح الأخطاء\", \"تحسين الأداء\"]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Promotion Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver\": {{receiver_user_id}},\n    \"title\": \"عرض خاص! خصم 20%\",\n    \"message\": \"احصل على خصم 20% على جميع حجوزات السيارات هذا الأسبوع. استخدم كود: SAVE20\",\n    \"notification_type\": \"PROMOTION\",\n    \"priority\": \"LOW\",\n    \"data\": {\n        \"discount_percentage\": 20,\n        \"promo_code\": \"SAVE20\",\n        \"valid_until\": \"2025-01-23\",\n        \"applicable_cars\": \"all\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "✅ Mark as Read Operations",
			"item": [
				{
					"name": "Mark Single Notification as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notification marked as read\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('notification');",
									"    pm.expect(jsonData.notification.is_read).to.be.true;",
									"    pm.expect(jsonData.notification).to.have.property('read_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/{{test_notification_id}}/mark_as_read/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"{{test_notification_id}}",
								"mark_as_read",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark All Notifications as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response shows count of marked notifications\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/mark_all_as_read/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"mark_all_as_read",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📤 Sent Notifications",
			"item": [
				{
					"name": "Get Sent Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains sent notifications\", function () {",
									"    const jsonData = pm.response.json();",
									"    const notifications = Array.isArray(jsonData) ? jsonData : jsonData.results;",
									"    ",
									"    if (notifications && notifications.length > 0) {",
									"        notifications.forEach(notification => {",
									"            pm.expect(notification).to.have.property('sender');",
									"            pm.expect(notification).to.have.property('receiver');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/sent/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"sent",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🗑️ Cleanup Operations",
			"item": [
				{
					"name": "Delete Read Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response shows deleted count\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/delete_read/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"delete_read",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🔍 Edge Cases & Error Testing",
			"item": [
				{
					"name": "Create Notification with Invalid Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for invalid type\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notification_type');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"receiver\": {{receiver_user_id}},\n    \"title\": \"Test\",\n    \"message\": \"Test message\",\n    \"notification_type\": \"INVALID_TYPE\",\n    \"priority\": \"NORMAL\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Notifications Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Unauthorized error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Non-existent Notification as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Not found error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/notifications/00000000-0000-0000-0000-000000000000/mark_as_read/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"notifications",
								"00000000-0000-0000-0000-000000000000",
								"mark_as_read",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// تأكد من وجود الـ auth token",
					"if (!pm.collectionVariables.get('auth_token')) {",
					"    console.log('⚠️ تحذير: لم يتم العثور على auth_token. تأكد من تشغيل Login request أولاً');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Global test for content type (except for specific endpoints)",
					"if (pm.response.headers.get('Content-Type')) {",
					"    pm.test(\"Content-Type is application/json\", function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_email",
			"value": "admin@cark.com",
			"type": "string"
		},
		{
			"key": "user_password",
			"value": "123456",
			"type": "string"
		},
		{
			"key": "receiver_user_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "test_notification_id",
			"value": "",
			"type": "string"
		}
	]
} 